##################### README #####################

COL362 Assignment 3
Hardik Agrawal (2018CS10336)
Mayank Yadav (2018CS10356)
Sharique Shamim (2018CS10388)

##################### BASIC FUNCTIONALITIES #####################

1. make linearsearch - Compiles the linearsearch executable if it is out of date with linearsearch.o, this executable can be run as ./linearsearch <input_filename> <query_filename> <output_filename>

2. make binarysearch - Compiles the binarysearch executable if it is out of date with binarysearch.o, this executable can be run as ./binarysearch <sorted_input_filename> <query_filename> <output_filename>

3. make deletion - Compiles the deletion executable if it is out of date with deletion.o, this executable can be run as ./deletion <sorted_input_filename> <query_filename>

4. make join1 - Compiles the join1 executable if it is out of date with join1.o, this executable can be run as ./join1 <input1_filename> <input2_filename> <output_filename>

5. make join2 - Compiles the join2 executable if it is out of date with join2.o, this executable can be run as ./join2 <input1_filename> <input2_filename> <output_filename>

6. make clean - Cleans all the object files, executables and temporary text files created during the process

##################### ALGORITHMS #####################

1. Linear Search - The total number of pages is calculated by accessing the last page into the buffer which is then flushed. The queries are read one by one and the integer is searched in the file by iterating from the first page to the last page till an INT_MIN is found. Within a page linear search is done. At any instant there are only two pages in the  buffer, one for writing the output and one for the input page on which the integer is being searched for. After all the queries are searched, the last page of the output file is filled with INT_MIN.

2. Binary Search - The total number of pages is calculated by accessing the last page into the buffer which is then flushed. The queries are read one by one and the integer is searched in the file by doing a binary search over the pages. Within a page also binary search is done. At any instant there are only two pages in the  buffer, one for writing the output and one for the input page on which the integer is being searched for. After all the queries are searched, the last page of the output file is filled with INT_MIN.

3. Deletion - Binary Search is done to find the first occurrence and last occurrence of the integer which is to be deleted. If the integer is found in the file, then the pointers of all integers from last occurrence + 1 are shifted to first occurrence and so on. Once the pointers to all the integers after last occurrence are shifted, all the pages after that are Disposed.

4. Join1 - Reads inputs from two unsorted files and returns the join of the two files. This algorithm iterates over words in pages of file1 and outputs it in the output file every time it occurs in file2. It is optimized to reduce block accesses by using pages of file2 present in the memory first with all the pages of file1. The total block accesses thus are a + a*b/(n-2) where a and b are blocks in file2 and file1 respectively.

5. Join2 - Reads inputs from two files one unsorted and another sorted and returns the join of the two files. It has the same functionality as join1 but this algorithm uses binary search to find occurrences of a word in file2.

##################### EXTRA FUNCTIONALITIES #####################

(The global variable for testing can be easily set at the starting of the Makefile)
(INP - Input file name generated by tester to be given to the algorithm
OUT_CORRECT - Correct output file generated by tester for a particular algorithm
OUT - Output file given to the algorithm and later checked with OUT_CORRECT to determine if the algorithm generates the correct output
QUERY - Query file generated by tester and given to the algorithm
INP2 - Input file name generated by tester to be given to the algorithms join1 and join2
LARGENUM/SMALLNUM - Total number of integers in the INP file
MAXINARRAY - Maximum value of integers in INP file
NUMQUERIES - Number of queries to be put in QUERY file by the tester)

1. make viewfile - compiles viewfile executable which can be used to view any binary file. It can be run as ./viewfile <input_filename>.
2. make tester - compiles tester executable which can be used to test algorithms on large system generated inputs. The LARGENUM parameter in makefile specifies the number of integers in input_file for linearsearch and binarysearch and SMALLNUM parameter specifies number of integers in input file for deletion, join1 and join2. The integers in the input file are in range [0,MAXINARRAY) and the number of queries in the query_file is specified by NUMQUERIES.

    ./tester 0 <INP> <QUERY> <OUT_CORRECT> <LARGENUM> <MAXINARRAY> <NUMQUERIES> - Used to test linearsearch.
    ./tester 1 <INP> <QUERY> <OUT_CORRECT> <LARGENUM> <MAXINARRAY> <NUMQUERIES> - Used to test binarysearch
    ./tester 2 <INP> <QUERY> <OUT_CORRECT> <SMALLNUM> <MAXINARRAY> <NUMQUERIES> - Used to test deletion
    ./tester 3 <INP> <INP2> <OUT_CORRECT> <SMALLNUM> <MAXINARRAY> <NUMQUERIES> - Used to test join1
    ./tester 4 <INP> <INP2> <OUT_CORRECT> <SMALLNUM> <MAXINARRAY> <NUMQUERIES> - Used to test join2

3. make compare - Compares the output of join generated by the algorithm with correct output.
4. make clean - Deletes all the object files, executables. 
5. make test_linearsearch -  Runs linearsearch on the given input & queries.
6. make test_binarysearch - Runs binarysearch on the given input & queries.
7. make test_deletion - Runs deletion search on the given input & queries.
8. make test_join1 - Runs Join1 on the given input.
9. make test_join2 - Runs Join2 on the given input.
10. make test_some - Runs linearsearch, binarysearch & deletion search on the given input & queries.
11. make test_rest - Runs Join1 & Join2 on the given input & queries.
12. make test_all - Runs all the algorithms on the given input and queries.